plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco' // JaCoCo 플러그인 추가
}

group = 'com.gmail.leejaewon264'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-security' // Spring Security for role management

    // Lombok for reducing boilerplate code
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // MySQL connector
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Testing dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit' // JUnit 4 제외
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api' // JUnit 5 API
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine' // JUnit 5 Engine
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform() // JUnit 5 플랫폼 사용
}

// JaCoCo 설정 추가
jacoco {
    toolVersion = "0.8.10" // JaCoCo 버전 설정
}

tasks.jacocoTestReport {
    dependsOn test // 테스트 실행 후 리포트 생성
    reports {
        xml.required = true  // XML 리포트 생성 (Jenkins에서 사용 가능)
        html.required = true // HTML 리포트 생성 (브라우저에서 확인 가능)
    }
}

tasks.jacocoTestCoverageVerification {
    dependsOn jacocoTestReport // 리포트 생성 후 검증 실행
    violationRules {
        rule {
            limit {
                minimum = 0.80 // 최소 80% 커버리지 요구
            }
        }
    }
}

// 테스트 후 자동으로 커버리지 검증 실행
tasks.named('check') {
    dependsOn tasks.jacocoTestCoverageVerification
}

